#!/usr/bin/env python3
import itertools
import os
import subprocess
from pathlib import Path
from typing import Optional

HOME = os.path.expanduser("~")


def update_venv(venv_path):
    # call subprocess: source .venv
    command = f"{venv_path}/bin/python3 -m pip install -U ruff black isort pytest"
    subprocess.run(command, shell=True, check=True)


def find_path(current_path: Path, search_text: str) -> Optional[str]:
    """Brute force recursive directory search"""

    # ? edge case, what happens when we're already in .venv?
    def gen_paths(path: Path):
        return (str(p) for p in path.iterdir())

    paths = set(
        itertools.chain(gen_paths(current_path), gen_paths(current_path.parent))
    )

    for p in paths:
        if search_text in p:
            return p

    # TODO seems hacky, fix this later
    _next = current_path.parent.parent
    # check if current parent's parent path is home or higher.
    # if it is, bail out recurssion. don't go higher than HOME dir.
    nxt_str = str(_next)
    if nxt_str == HOME or HOME not in nxt_str:
        return None

    return find_path(_next, search_text)


def main():
    # TODO arg parse or typer
    venv_path = find_path(Path(os.getcwd()), ".venv")

    if venv_path:
        print("found .venv at :", venv_path)
        update_venv(venv_path)
    else:
        print(".venv not found")


if __name__ == "__main__":
    raise SystemExit(main())
