#!/usr/bin/env python3
import subprocess
from pathlib import Path
from typing import Optional

import typer  # pip3 install -U typer[all]

HOME_PATH = str(Path.home())
CHECK_SUB_SHELL_PROCESS = False


def replace_venv(path: Path) -> None:
    print(f"Deleting venv at {path}")
    subprocess.run(
        f"rm -rf {path} && virtualenv -p $(pyenv version-name) {path}",
        shell=True,
        check=CHECK_SUB_SHELL_PROCESS,
    )


def update_pip_and_extras(venv_path: Path) -> None:
    # call subprocess: source .venv
    path = venv_path / "bin" / "python3"
    subprocess.run(
        f"{path} -m pip install -U pip", shell=True, check=CHECK_SUB_SHELL_PROCESS
    )
    subprocess.run(
        f"{path} -m pip install -U ruff black isort pytest pytest-cov",
        shell=True,
        check=CHECK_SUB_SHELL_PROCESS,
    )


def find_path(current_path: str, search_text: str) -> Optional[Path]:
    """Brute force recursive directory search"""
    # Edge case, if script cwd is in .venv
    if search_text in current_path:
        return find_path(str(Path(current_path).parent), search_text)

    cur = Path(current_path)
    while True:
        str_p = str(cur)
        # end iterating if we are at $HOME or root
        if str_p == HOME_PATH or str_p == "/":
            return None

        # Get everything in the current directory
        for p in cur.glob("*"):
            if search_text in str(p):
                return p

        # Go up to parent directory
        cur = cur.parent


def main(replace: bool = False) -> int:
    try:
        # TODO arg parse or typer
        venv_path = find_path(str(Path.cwd()), ".venv")
        if not venv_path:
            print(".venv not found")
            return 1

        print("found .venv at :", venv_path)
        if replace:
            replace_venv(venv_path)

        update_pip_and_extras(venv_path)
    except KeyboardInterrupt:
        print("Keyboard Interrupt sent! Stopping process.")
        return 1

    return 0


if __name__ == "__main__":
    typer.run(main)
